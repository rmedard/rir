<?php

use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

function rir_preprocess_menu(&$variables)
{
    if (isset($variables['menu_name']) and $variables['menu_name'] === 'adverts-secondary-menu') {
        $featured = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_posting_plan', 'standard', '<>')
            ->count();
        $featured_count = $featured->execute();

        $house = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', ['house', 'building'], 'IN')
            ->count();
        $house_count = $house->execute();

        $apart = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', 'apartment')
            ->count();
        $apart_count = $apart->execute();

        $commerce = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', 'commerce')
            ->count();
        $commerce_count = $commerce->execute();

        $room = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', ['room', 'shared_room'], 'IN')
            ->count();
        $room_count = $room->execute();

        $office = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', 'office')
            ->count();
        $office_count = $office->execute();

        $land = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('field_advert_property_type', 'land')
            ->count();
        $land_count = $land->execute();

        $menu_adverts_tabs_values = [
            1 => $featured_count,
            2 => $house_count,
            3 => $apart_count,
            4 => $commerce_count,
            5 => $room_count,
            6 => $office_count,
            7 => $land_count,
        ];
        $variables['menu_adverts_tabs_values'] = $menu_adverts_tabs_values;
    }
}

function rir_preprocess_page_title(&$variables)
{
    $queryString = \Drupal::request()->getQueryString();
    if (isset($queryString) && preg_match('(advert_target_pr)', $queryString)) {
        $variables['title'] = t('Submit a property');
    }

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface && $node->bundle() == 'property_request') {
        if (!$node->get('field_pr_reference')->isEmpty()) {
            $variables['title'] .= ($variables['title'] . ' (PR_' . $node->get('field_pr_reference')->getEntity()->id() . ')');
        }
    }

    $variables['show_page_title'] = TRUE;
    $exception = \Drupal::request()->attributes->get('exception');
    if ($exception and ($exception->getStatusCode() == '404' or $exception->getStatusCode() == '403')) {
        $variables['show_page_title'] = FALSE;
    }
}

function rir_preprocess_page(&$variables)
{

    $variables['#cache']['contexts'][] = 'url.path';
    $variables['#cache']['contexts'][] = 'url.query_args'; // If you have query args available and want to update cache when they change.

    $page_path = \Drupal::request()->getPathInfo();
    $variables['show_sidebars'] = TRUE;
    $variables['show_rir_search'] = FALSE;
    $variables['management_page'] = FALSE;

    if (preg_match('(/pricing-plans)', $page_path) or preg_match('(/services)', $page_path)
        or preg_match('(/manage)', $page_path)) {
        $variables['show_sidebars'] = FALSE;
        if (preg_match('(/manage)', $page_path)) {
            $variables['management_page'] = TRUE;
        }
    }

    if (preg_match('(\/properties\/)', $page_path)
        or preg_match('(\/property\/)', $page_path)
        or preg_match('(/search-adverts)', $page_path)
        or preg_match('(/for-rent)', $page_path)
        or preg_match('(/for-sale)', $page_path)
        or preg_match('(/auctions)', $page_path)
        or Drupal::service('path.matcher')->isFrontPage()) {
        $variables['show_rir_search'] = TRUE;
    }

    $exception = \Drupal::request()->attributes->get('exception');
    if ($exception and ($exception->getStatusCode() == '404' or $exception->getStatusCode() == '403')) {
        $variables['show_sidebars'] = FALSE;
    }
}

function rir_preprocess_block(&$variables)
{
    if ($variables['derivative_plugin_id'] == 'rir_realtime_block') {
        $variables['#cache']['max-age'] = 0;
    }
}

function rir_preprocess_views_view_field(&$variables)
{
    $view = $variables['view'];
    $field = $variables['field'];

    if ($view->storage->id() === 'details_requests' and $view->current_display == 'page_manage_details_requests' and $field->realField === 'entity_id') {
        $advert_id = intval($field->getValue($variables['row']));
        if (isset($advert_id)) {
            $advert = Node::load($advert_id);
            if (isset($advert)) {
                $advert_url = Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $advert->id());
                $variables['output'] = Markup::create('<a href="' . $advert_url . '"> ' . $advert->getTitle() . '</a>');
            }
        }
    }

    if ($view->storage->id() === 'adverts' and $view->current_display === 'page_manage_adverts' and $field->realField === 'nid') {
        $advert_id = intval($field->getValue($variables['row']));
        $variables['output'] = Markup::create(getDuplicateAdverts($advert_id));
    }
}

function getDuplicateAdverts($advert_id)
{
    $advert = Node::load($advert_id);
    $signature = $advert->get('field_advert_signature')->value;
    $output = '<p class="duplicate-refs">';
    if (isset($signature) and !empty($signature)) {
        $advertsQuery = \Drupal::entityQuery('node')
            ->condition('type', 'advert')
            ->condition('status', Node::PUBLISHED)
            ->condition('nid', $advert_id, '<>')
            ->condition('field_advert_signature', $signature, '=');
        $advert_ids = $advertsQuery->execute();
        if (count($advert_ids) > 0) {
            $adverts = Node::loadMultiple($advert_ids);
            foreach ($adverts as $advert) {
                $output .= $advert->get('field_advert_reference')->value . '<br>';
            }
        } else {
            $output .= t('None');
        }
    } else {
        $output .= t('None');
    }
    $output .= '</p>';
    return $output;
}